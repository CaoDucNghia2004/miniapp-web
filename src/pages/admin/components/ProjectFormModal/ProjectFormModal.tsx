import { useEffect } from 'react'
import {
  Modal,
  Form,
  Input,
  DatePicker,
  Select,
  Button,
  Steps,
  Timeline,
  Popconfirm,
  Card,
  Divider,
  message
} from 'antd'
import { FileAddOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons'
import dayjs from 'dayjs'
import type { Field } from 'src/types/field.type'
import type { User } from 'src/types/user.type'
import type { Project } from 'src/types/projects.type'
import type { ProjectPhase } from 'src/types/projectPhase.type'
import type { Contract } from 'src/types/contract.type'
import contractsApi from 'src/apis/contracts.api'
import { getContractUrl, getProjectPhaseStatusLabel } from 'src/utils/utils'

interface ProjectFormModalProps {
  open: boolean
  onClose: () => void
  step: number
  setStep: (step: number) => void
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  form: any
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  phaseForm: any
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  contractForm: any
  fields?: Field[]
  users?: User[]
  selectedProject: Project | null
  editingProject: Project | null
  editingPhase: ProjectPhase | null
  setEditingPhase: (p: ProjectPhase | null) => void
  phases?: ProjectPhase[]
  contracts?: Contract[]
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  handleSubmitProject: (values: any) => void
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  handleSubmitPhase: (values: any) => void
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  handleSubmitContract: (values: any) => void
  onDeletePhase: (id: number) => void
}

export default function ProjectFormModal({
  open,
  onClose,
  step,
  setStep,
  form,
  phaseForm,
  contractForm,
  fields,
  users,
  selectedProject,
  editingProject,
  editingPhase,
  setEditingPhase,
  phases,
  contracts,
  handleSubmitProject,
  handleSubmitPhase,
  handleSubmitContract,
  onDeletePhase
}: ProjectFormModalProps) {
  const [messageApi, contextHolder] = message.useMessage()

  useEffect(() => {
    if (open && contracts && contracts.length > 0) {
      const c = contracts[0]
      contractForm.setFieldsValue({
        contractNumber: c.contractNumber,
        contractFile: c.contractFile,
        signedDate: c.signedDate ? dayjs(c.signedDate) : null
      })
    }
  }, [open, contracts, contractForm])

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const onSubmitProject = (values: any) => {
    if (phases && phases.length > 0) {
      if (values.status === 'PENDING') {
        const invalid = phases.some((p) => p.status !== 'PENDING')
        if (invalid) {
          messageApi.error('Kh√¥ng th·ªÉ ƒë·∫∑t d·ª± √°n ·ªü tr·∫°ng th√°i "ƒêang ch·ªù" khi c√≥ giai ƒëo·∫°n kh√¥ng ph·∫£i ƒêang ch·ªù.')
          return
        }
      }
      if (values.status === 'COMPLETED') {
        const invalid = phases.some((p) => p.status !== 'COMPLETED')
        if (invalid) {
          messageApi.error('T·∫•t c·∫£ giai ƒëo·∫°n ph·∫£i "Ho√†n th√†nh" tr∆∞·ªõc khi d·ª± √°n c√≥ th·ªÉ ƒë√°nh d·∫•u l√† Ho√†n th√†nh.')
          return
        }
      }
    }
    handleSubmitProject(values)
  }

  // ‚úÖ validate khi submit Phase (Step 1)
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const onSubmitPhase = (values: any) => {
    if (!selectedProject) return
    const projectStatus = selectedProject.status
    const phaseStatus = values.status

    if (projectStatus === 'PENDING' && phaseStatus !== 'PENDING') {
      messageApi.error('Giai ƒëo·∫°n kh√¥ng h·ª£p l·ªá: D·ª± √°n ƒëang "ƒêang ch·ªù" ‚Üí giai ƒëo·∫°n ch·ªâ ƒë∆∞·ª£c ph√©p "ƒêang ch·ªù".')
      return
    }
    if (projectStatus === 'COMPLETED' && phaseStatus !== 'COMPLETED') {
      messageApi.error('Giai ƒëo·∫°n kh√¥ng h·ª£p l·ªá: D·ª± √°n ƒë√£ "Ho√†n th√†nh" ‚Üí giai ƒëo·∫°n b·∫Øt bu·ªôc ph·∫£i "Ho√†n th√†nh".')
      return
    }
    // CANCELLED th√¨ cho ph√©p m·ªçi tr·∫°ng th√°i
    handleSubmitPhase(values)
  }

  return (
    <Modal
      title={editingProject ? 'C·∫≠p nh·∫≠t d·ª± √°n' : 'Th√™m d·ª± √°n'}
      open={open}
      onCancel={onClose}
      footer={null}
      width={800}
    >
      {contextHolder}
      <Steps current={step} items={[{ title: 'D·ª± √°n' }, { title: 'Giai ƒëo·∫°n' }, { title: 'H·ª£p ƒë·ªìng' }]} />

      {/* Step 0 - Project */}
      {step === 0 && (
        <Form form={form} layout='vertical' onFinish={onSubmitProject} className='mt-4'>
          <Form.Item label='T√™n d·ª± √°n' name='name' rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n d·ª± √°n' }]}>
            <Input />
          </Form.Item>
          <Form.Item label='M√¥ t·∫£' name='description'>
            <Input.TextArea rows={3} />
          </Form.Item>
          <Form.Item label='Ng√†y b·∫Øt ƒë·∫ßu' name='startDate' rules={[{ required: true, message: 'Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu' }]}>
            <DatePicker format='DD/MM/YYYY' />
          </Form.Item>
          <Form.Item label='Ng√†y k·∫øt th√∫c' name='endDate' rules={[{ required: true, message: 'Ch·ªçn ng√†y k·∫øt th√∫c' }]}>
            <DatePicker format='DD/MM/YYYY' />
          </Form.Item>
          <Form.Item label='Lƒ©nh v·ª±c' name='fieldId' rules={[{ required: true, message: 'Ch·ªçn lƒ©nh v·ª±c' }]}>
            <Select options={(fields || []).map((f) => ({ label: f.fieldName, value: f.id }))} />
          </Form.Item>
          <Form.Item label='Kh√°ch h√†ng' name='userId' rules={[{ required: true, message: 'Ch·ªçn kh√°ch h√†ng' }]}>
            <Select
              showSearch
              options={(users || []).map((u) => ({
                label: `${u.name || 'Ch∆∞a c√≥ t√™n'} - ${u.email}`,
                value: u.id
              }))}
            />
          </Form.Item>
          <Form.Item label='Tr·∫°ng th√°i' name='status' rules={[{ required: true, message: 'Ch·ªçn tr·∫°ng th√°i d·ª± √°n' }]}>
            <Select
              options={[
                { label: 'ƒêang ch·ªù', value: 'PENDING' },
                { label: 'ƒêang th·ª±c hi·ªán', value: 'IN_PROGRESS' },
                { label: 'Ho√†n th√†nh', value: 'COMPLETED' },
                { label: 'ƒê√£ h·ªßy', value: 'CANCELLED' }
              ]}
            />
          </Form.Item>
          <Button type='primary' htmlType='submit'>
            L∆∞u v√† ti·∫øp t·ª•c
          </Button>
        </Form>
      )}

      {/* Step 1 - Phases */}
      {step === 1 && selectedProject && (
        <div className='mt-4'>
          <Form form={phaseForm} layout='vertical' onFinish={onSubmitPhase}>
            <Form.Item
              label='T√™n giai ƒëo·∫°n'
              name='phaseName'
              rules={[{ required: true, message: 'Nh·∫≠p t√™n giai ƒëo·∫°n' }]}
              hasFeedback
            >
              <Input placeholder='Nh·∫≠p t√™n giai ƒëo·∫°n...' />
            </Form.Item>
            <Form.Item label='M√¥ t·∫£' name='description'>
              <Input.TextArea rows={2} placeholder='M√¥ t·∫£ chi ti·∫øt giai ƒëo·∫°n...' />
            </Form.Item>
            <div className='grid grid-cols-2 gap-4'>
              <Form.Item
                label='Ng√†y b·∫Øt ƒë·∫ßu'
                name='startDate'
                rules={[{ required: true, message: 'Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu' }]}
                hasFeedback
              >
                <DatePicker format='DD/MM/YYYY' className='w-full' />
              </Form.Item>
              <Form.Item
                label='Ng√†y k·∫øt th√∫c'
                name='endDate'
                rules={[{ required: true, message: 'Ch·ªçn ng√†y k·∫øt th√∫c' }]}
                hasFeedback
              >
                <DatePicker format='DD/MM/YYYY' className='w-full' />
              </Form.Item>
            </div>
            <Form.Item
              label='Tr·∫°ng th√°i'
              name='status'
              rules={[{ required: true, message: 'Ch·ªçn tr·∫°ng th√°i giai ƒëo·∫°n' }]}
              hasFeedback
            >
              <Select
                placeholder='Ch·ªçn tr·∫°ng th√°i'
                options={[
                  {
                    label: '‚è≥ ƒêang ch·ªù',
                    value: 'PENDING',
                    disabled:
                      selectedProject.status !== 'PENDING' &&
                      selectedProject.status !== 'IN_PROGRESS' &&
                      selectedProject.status !== 'CANCELLED'
                  },
                  {
                    label: 'üöÄ ƒêang th·ª±c hi·ªán',
                    value: 'IN_PROGRESS',
                    disabled: selectedProject.status !== 'IN_PROGRESS' && selectedProject.status !== 'CANCELLED'
                  },
                  {
                    label: '‚úÖ Ho√†n th√†nh',
                    value: 'COMPLETED',
                    disabled: selectedProject.status === 'PENDING'
                  }
                ]}
              />
            </Form.Item>
            <Form.Item
              label='S·ªë ti·ªÅn'
              name='amountDue'
              rules={[{ required: true, message: 'Nh·∫≠p s·ªë ti·ªÅn' }]}
              hasFeedback
            >
              <Input type='number' placeholder='Nh·∫≠p s·ªë ti·ªÅn...' />
            </Form.Item>

            <Button type='dashed' htmlType='submit' icon={<FileAddOutlined />} block>
              {editingPhase ? 'C·∫≠p nh·∫≠t giai ƒëo·∫°n' : '‚ûï Th√™m giai ƒëo·∫°n'}
            </Button>
          </Form>

          <Divider />

          <Card title='üìë Danh s√°ch giai ƒëo·∫°n' className='mt-10 shadow rounded-lg border border-gray-200'>
            {phases && phases.length > 0 ? (
              <Timeline
                mode='left'
                items={phases.map((p) => ({
                  dot: <span className='text-blue-500'>‚Ä¢</span>,
                  children: (
                    <div className='flex justify-between items-start p-3 rounded-md hover:bg-gray-50 transition'>
                      <div>
                        <b className='text-blue-600'>{p.phaseName}</b>{' '}
                        <span className='text-gray-500 text-sm'>
                          ({new Date(p.startDate).toLocaleDateString('vi-VN')} -{' '}
                          {new Date(p.endDate).toLocaleDateString('vi-VN')})
                        </span>
                        <p className='mt-1 text-gray-700'>{p.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</p>
                        <p className='text-sm'>
                          <b>Tr·∫°ng th√°i:</b>{' '}
                          <span
                            className={
                              p.status === 'COMPLETED'
                                ? 'text-green-600'
                                : p.status === 'IN_PROGRESS'
                                  ? 'text-orange-500'
                                  : 'text-gray-500'
                            }
                          >
                            {getProjectPhaseStatusLabel(p.status)}
                          </span>
                        </p>
                        <p className='text-sm'>
                          <b>S·ªë ti·ªÅn:</b> {p.amountDue.toLocaleString()} VND
                        </p>
                      </div>
                      <div className='flex gap-2'>
                        <Button
                          size='small'
                          type='default'
                          icon={<EditOutlined style={{ color: '#1890ff' }} />}
                          onClick={() => {
                            setEditingPhase(p)
                            phaseForm.setFieldsValue({
                              ...p,
                              startDate: dayjs(p.startDate),
                              endDate: dayjs(p.endDate)
                            })
                          }}
                        />
                        <Popconfirm title='B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a giai ƒëo·∫°n n√†y?' onConfirm={() => onDeletePhase(p.id)}>
                          <Button size='small' danger icon={<DeleteOutlined style={{ color: 'red' }} />} />
                        </Popconfirm>
                      </div>
                    </div>
                  )
                }))}
              />
            ) : (
              <p className='text-gray-500 italic'>Ch∆∞a c√≥ giai ƒëo·∫°n n√†o</p>
            )}
          </Card>

          <div className='flex gap-2 mt-4'>
            <Button onClick={() => setStep(0)}>‚¨ÖÔ∏è Quay l·∫°i d·ª± √°n</Button>
            <Button type='primary' onClick={() => setStep(2)}>
              Ti·∫øp t·ª•c ‚û°Ô∏è h·ª£p ƒë·ªìng
            </Button>
          </div>
        </div>
      )}

      {/* Step 2 - Contract */}
      {step === 2 && selectedProject && (
        <div className='mt-4'>
          <Form form={contractForm} layout='vertical' onFinish={handleSubmitContract}>
            <Form.Item
              label='S·ªë h·ª£p ƒë·ªìng'
              name='contractNumber'
              rules={[{ required: true, message: 'Nh·∫≠p s·ªë h·ª£p ƒë·ªìng' }]}
            >
              <Input />
            </Form.Item>

            <Form.Item label='T·ªïng gi√° tr·ªã h·ª£p ƒë·ªìng'>
              <Input
                value={(phases || []).reduce((acc, p) => acc + (p.amountDue || 0), 0).toLocaleString() + ' VND'}
                disabled
              />
            </Form.Item>

            {/* Ng√†y k√Ω h·ª£p ƒë·ªìng */}
            <Form.Item
              label='Ng√†y k√Ω h·ª£p ƒë·ªìng'
              name='signedDate'
              rules={[{ required: true, message: 'Ch·ªçn ng√†y k√Ω h·ª£p ƒë·ªìng' }]}
            >
              <DatePicker format='DD/MM/YYYY' className='w-full' />
            </Form.Item>

            <Form.Item name='contractFile' hidden>
              <Input />
            </Form.Item>

            <Form.Item label='File h·ª£p ƒë·ªìng' required>
              {contracts && contracts.length > 0 && contracts[0].contractFile ? (
                <div>
                  <p>
                    File hi·ªán t·∫°i:{' '}
                    <a
                      href={getContractUrl(contracts[0].contractFile)}
                      target='_blank'
                      rel='noopener noreferrer'
                      className='text-blue-600 underline hover:text-blue-800'
                    >
                      {contracts[0].contractFile.split('/').pop()}
                    </a>
                  </p>
                  <label className='inline-flex items-center px-3 py-2 bg-gray-100 border rounded cursor-pointer hover:bg-gray-200'>
                    üìÇ
                    <input
                      type='file'
                      accept='.pdf'
                      className='hidden'
                      onChange={async (e) => {
                        const file = e.target.files?.[0]
                        if (!file) return
                        try {
                          const res = await contractsApi.uploadFile(file)
                          const relativePath = res.data.data.fileUrl
                          contractForm.setFieldsValue({ contractFile: relativePath })
                        } catch (err) {
                          console.error('Upload error:', err)
                        }
                      }}
                    />
                  </label>
                </div>
              ) : (
                <label className='inline-flex items-center px-3 py-2 bg-gray-100 border rounded cursor-pointer hover:bg-gray-200'>
                  üìÇ
                  <input
                    type='file'
                    accept='.pdf'
                    className='hidden'
                    onChange={async (e) => {
                      const file = e.target.files?.[0]
                      if (!file) return
                      try {
                        const res = await contractsApi.uploadFile(file)
                        const relativePath = res.data.data.fileUrl
                        contractForm.setFieldsValue({ contractFile: relativePath })
                      } catch (err) {
                        console.error('Upload error:', err)
                      }
                    }}
                  />
                </label>
              )}
            </Form.Item>

            <div className='flex gap-2 mt-4'>
              <Button icon={<EditOutlined />} onClick={() => setStep(1)}>
                Quay l·∫°i giai ƒëo·∫°n
              </Button>
              <Button type='primary' htmlType='submit'>
                {contracts && contracts.length > 0 ? 'C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng' : 'L∆∞u h·ª£p ƒë·ªìng'}
              </Button>
            </div>
          </Form>
        </div>
      )}
    </Modal>
  )
}
